package rockpapersscissorsguidesign;

/**
 * File name: Rock Paper Scissors
 * Programmers: Fayez Mohammed, Ayan Noorani, Daniel Huang, Tenzin Wangmo
 * Date: July 22nd, 2022
 * Description: A simple Rock Paper Scissors game against a robot! First to five points wins.
 */

/* Import calls for array lists, swing events, atomic integers, logging etc. */
import java.util.ArrayList; 
import java.util.Iterator;
import javax.swing.*;
import java.awt.event.*;
import java.io.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.logging.Level;
import java.util.logging.Logger;

public class GUIDesign extends javax.swing.JFrame {
    
    ArrayList<Integer> playerMoves = new ArrayList<>(); // Stores the player's previous moves
    int scorePlayer = 0; // Keeps track of the player's score
    int scoreBot = 0; // Keeps track of the bot's score
    
    /* Image variables */
    ImageIcon rockPlayer = new ImageIcon("rock flipped.jpg");
    ImageIcon scissorsPlayer = new ImageIcon("scissors flipped.jpg");
    ImageIcon paperPlayer = new ImageIcon("paper flipped.jpg");
    ImageIcon rockBot = new ImageIcon("rock (resized).jpg");
    ImageIcon scissorsBot = new ImageIcon("scissors (resized).jpg");
    ImageIcon paperBot = new ImageIcon("paper (resized).jpg");
    ImageIcon blankBot = new ImageIcon("blank.png");
    ImageIcon blankPlayer = new ImageIcon("blank flipped.png");

    /**
     * Creates new form GUIDesign
     */
    public GUIDesign() {
        initComponents();
        JOptionPane.showMessageDialog(this, "Welcome to Rock, Paper Scissors!"
                + "\nThis is a simple rock paper scissors game against a bot."
                + "\nRock beats scissors. Scissors beats paper. Paper beats Rock."
                + "\nFirst to five points wins!"); // Displays an intoductory option pane before opening the main window
        readWins(); // Displays win stats on open
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBotGroup = new javax.swing.ButtonGroup();
        btnPlayerGroup = new javax.swing.ButtonGroup();
        btnGroupChoice = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        lblBot = new javax.swing.JLabel();
        lblPlayer = new javax.swing.JLabel();
        btnRock = new javax.swing.JRadioButton();
        btnPaper = new javax.swing.JRadioButton();
        btnScissorsP = new javax.swing.JRadioButton();
        btnShoot = new javax.swing.JButton();
        lblPlayerP = new javax.swing.JLabel();
        lblBotP = new javax.swing.JLabel();
        txtPlayer = new javax.swing.JTextField();
        txtBot = new javax.swing.JTextField();
        lblBotTitle = new javax.swing.JLabel();
        lblPlayerTitle = new javax.swing.JLabel();
        txtResponse = new javax.swing.JTextField();
        lblVersus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblAnimation = new javax.swing.JLabel();
        lblRobotWins = new javax.swing.JLabel();
        lblPlayerWins = new javax.swing.JLabel();
        txtRobotWins = new javax.swing.JTextField();
        txtPlayerWins = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("f"); // NOI18N

        lblTitle.setFont(new java.awt.Font("Ink Free", 1, 36)); // NOI18N
        lblTitle.setText("Rock Paper Scissors");

        lblBot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rockpapersscissorsguidesign/blank.png"))); // NOI18N

        lblPlayer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rockpapersscissorsguidesign/blank flipped.png"))); // NOI18N

        btnPlayerGroup.add(btnRock);
        btnRock.setText("Rock");

        btnPlayerGroup.add(btnPaper);
        btnPaper.setText("Paper");

        btnPlayerGroup.add(btnScissorsP);
        btnScissorsP.setText("Scissors");

        btnShoot.setText("Shoot!");
        btnShoot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShootActionPerformed(evt);
            }
        });

        lblPlayerP.setText("Player Points");

        lblBotP.setText("Bot Points");

        txtPlayer.setEditable(false);
        txtPlayer.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPlayer.setText("0");

        txtBot.setEditable(false);
        txtBot.setText("0");

        lblBotTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblBotTitle.setText("Bot");

        lblPlayerTitle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblPlayerTitle.setText("Player");
        lblPlayerTitle.setToolTipText("");

        txtResponse.setEditable(false);
        txtResponse.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtResponse.setText("Pick a move and press shoot to begin!");

        lblVersus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/rockpapersscissorsguidesign/vs.png"))); // NOI18N

        lblAnimation.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblAnimation.setText(" ");

        lblRobotWins.setText("Robot Wins:");

        lblPlayerWins.setText("Player Wins:");

        txtRobotWins.setEditable(false);

        txtPlayerWins.setEditable(false);
        txtPlayerWins.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblBotP)
                                    .addComponent(txtBot, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(66, 66, 66)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnShoot)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(btnRock, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnPaper, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addComponent(btnScissorsP))
                                    .addComponent(txtResponse, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPlayerP)
                                    .addComponent(txtPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblBot, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(89, 89, 89)
                                        .addComponent(lblBotTitle)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblVersus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(40, 40, 40)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGap(58, 58, 58))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(44, 44, 44)
                                        .addComponent(lblAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPlayer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblPlayerTitle)
                                        .addGap(77, 77, 77))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblRobotWins, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtRobotWins))
                        .addGap(59, 59, 59)
                        .addComponent(lblTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblPlayerWins, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtPlayerWins))))
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRobotWins)
                            .addComponent(lblPlayerWins))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtRobotWins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPlayerWins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblTitle)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBotTitle)
                            .addComponent(lblPlayerTitle))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBot, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(lblAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(55, 55, 55)
                        .addComponent(lblVersus, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPlayerP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblBotP)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnRock)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnPaper)
                                        .addComponent(btnScissorsP)))
                                .addGap(18, 18, 18)
                                .addComponent(btnShoot)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtResponse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnShootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShootActionPerformed
        // right as the shoot button is pressed
        //if none of the buttons were selected, then send a warning and does not run the program
        if (btnRock.isSelected() == false && btnScissorsP.isSelected() == false && btnPaper.isSelected() == false) {
            JOptionPane.showMessageDialog(this, "Please select a move before pressing shoot.", "WARNING", JOptionPane.WARNING_MESSAGE);
        } else { //if any of the buttons  were selected, then run program normally
            btnShoot.setEnabled(false); // Disables shoot button while animation plays
            pause(); // Plays the rock paper scissors animation

            // Continue with rest of code, everything inside action listenere will be performed when the timer is ended.
            ActionListener taskPerformer5 = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    readWins(); // Retrives win stats from txt file and displays in text boxes

                    /* Checks which radio button the player pressed between rock paper and scissors
                       Changes integer pick based on the player's selection
                       Adds the player's move to array list
                       Sets the icon to the move of their choice
                    */
                    int pick;
                    if (btnRock.isSelected()){ 
                        pick = 0;
                        playerMoves.add(pick);
                        lblPlayer.setIcon(rockPlayer);
                    } else if(btnScissorsP.isSelected()){
                        pick = 1;
                        playerMoves.add(pick);
                        lblPlayer.setIcon(scissorsPlayer);
                    } else {
                        pick = 2;
                        playerMoves.add(pick);
                        lblPlayer.setIcon(paperPlayer);
                    }

                    int pickBot = robotChoice(); // Chooses a move for the robot to play

                    /* Sets icon based on bot's move */
                    switch (pickBot) {
                        case 0:
                            lblBot.setIcon(rockBot);
                            break;
                        case 1:
                            lblBot.setIcon(scissorsBot);
                            break;
                        case 2:
                            lblBot.setIcon(paperBot);
                            break;
                        default:
                            break;
                    }

                    game(pick, pickBot); 
                    btnShoot.setEnabled(true); // Sets shoot button back to enables
                }};

            //timer lasts for 3 seconds and performs everything inside the action listener.
            Timer timer5 = new Timer(3000, taskPerformer5);
            //timer will only go once
            timer5.setRepeats(false);
            //starts the timer.
            timer5.start();
        }
        
    }//GEN-LAST:event_btnShootActionPerformed
    /**
     * Determines whether the player won, the bot won or it was a tie and checks if the game is over then restarts
     * @param pickP The player's move
     * @param pickB The bot's move
     */
    public void game(int pickP, int pickB) {
        if ((pickP == 0 && pickB == 1) || (pickP == 1 && pickB == 2) || (pickP == 2 && pickB == 0)) { // If the player has won the round
            scorePlayer++; // Adds 1 to the player's score
            txtResponse.setText("You have scored one point."); // Displays win message
            txtPlayer.setText(Integer.toString(scorePlayer)); // Displays updates score
            txtBot.setText(Integer.toString(scoreBot));
        } else if ((pickB == 0 && pickP == 1) || (pickB == 1 && pickP == 2) || (pickB == 2 && pickP == 0)) { // If the bot has won the round
            scoreBot++; // Adds 1 to the bot's score
            txtResponse.setText("The bot has scored one point."); // Displays loss message
            txtPlayer.setText(Integer.toString(scorePlayer)); 
            txtBot.setText(Integer.toString(scoreBot)); // Displays updated score
        } else {
            txtResponse.setText("There was a tie."); // Displays tie message
        }
        
        int playerWins = 0;
        int robotWins = 0;
        if (scorePlayer == 5){ // If the player has won the game
            JOptionPane.showMessageDialog(this, "YOU HAVE WON, You beat a robot at rock paper scissors!!! GAME OVER.");
            scorePlayer = 0; // Resets round scores
            scoreBot = 0;
            txtPlayer.setText("0"); // Resets score textboxes
            txtBot.setText("0");
            playerMoves.clear(); // Clears array containing the player's past moves
            playerWins = Integer.valueOf(txtPlayerWins.getText()) + 1; // Retrives the amount of wins the player has and adds 1
            robotWins = Integer.valueOf(txtRobotWins.getText()); // Retrieves the amount of wins the bot has
            writeWins(playerWins, robotWins); // Writes these new stats to the txt file
            readWins(); // Reads the new stats from txt file for the next game
            
        } else if (scoreBot == 5) { // If the bot has won the game
            JOptionPane.showMessageDialog(this, "You have lost to a robot at rock paper scissors. GAME OVER.");
            scorePlayer = 0; // Resets round scores
            scoreBot = 0; 
            txtPlayer.setText("0"); // Resets score textboxes
            txtBot.setText("0");
            playerMoves.clear(); // Clears array containing the player's past moves
            playerWins = Integer.valueOf(txtPlayerWins.getText()); // Retrives the amount of wins the player has
            robotWins = Integer.valueOf(txtRobotWins.getText()) + 1; // Retrieves the amount of wins the bot has and adds 1
            writeWins(playerWins, robotWins); // Writes these new stats to the txt file
            readWins(); // Reads the new stats from txt file for the next game
        }
        
    }
    
    /**
     * Chooses the robot's move either randomly or based off of previous input
     * @return The robot's move
     */
    public int robotChoice(){
        int pickBot = 0;
        int x = (int) Math.floor(Math.random() * 2); // Random Integer between 0 and 1
        if (playerMoves.size() >= 4 && x == 1) { // If the game has endured 4 rounds or more and the random number is 1
            Integer a;
            int rock, paper, scissors; // Variables to keep track of rock paper and scissors count from player's previous moves.
            rock = paper = scissors = 0;
            Iterator stepper = playerMoves.iterator(); // Creates a list iterator
            
            while (stepper.hasNext()) { // Goes through entire list
                a = (Integer) stepper.next(); // Stores current list value
                if (null != a) switch (a) { // Switches through values of a
                    case 0: 
                        rock++; // Adds 1 to rock if a is 0
                        break;
                    case 1: 
                        scissors++; // Adds 1 to scissors if a is 1
                        break;
                    case 2: 
                        paper++; // Adds 1 to paper if a is 2
                        break;
                    default:
                        break;
                }
            }
            if (rock > paper && rock > scissors) { // If the player has chosen rock the most
                pickBot = 2; // Play paper
            } else if (paper > rock && paper > scissors) { // If the player has chosen paper the most
                pickBot = 1; // Play scissors
            } else if (scissors > paper && scissors > rock) { // If the player has chosen scissors the most
                pickBot = 0; // Play rock
            } else { // If all moves have been played an equal amount of times
                pickBot = (int)Math.floor(Math.random() * 3); // Random choice
            }
        } else { 
            pickBot = (int)Math.floor(Math.random() * 3); // Random choice
        }
        return pickBot;
    }
    
    /**
     * Plays the rock paper scissors animation
     */
    public void pause(){
        //sets the animation label to rock
        lblAnimation.setText("Rock...");
        
        //makes action listener for paper
        ActionListener taskPerformer2 = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                lblAnimation.setText("Paper...");
            }
        };
        //sets timer for 1 second to perform paper change
        Timer timer2 = new Timer(1000, taskPerformer2);
        timer2.setRepeats(false); //only goes once
        timer2.start(); //starts the timer
        
        //makes action listener for scissors
        ActionListener taskPerformer3 = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                lblAnimation.setText("Scissors...");
            }
        };
        //sets timer for 2 second to perform paper change
        Timer timer3 = new Timer(2000, taskPerformer3);
        timer3.setRepeats(false); //only goes once
        timer3.start(); //starts the timer
        
        //makes action listener for shoot
        ActionListener taskPerformer4 = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                lblAnimation.setText("Shoot!");
            }
        };
        //sets timer for 3 second to perform paper change
        Timer timer4 = new Timer(3000, taskPerformer4);
        timer4.setRepeats(false); //only goes once
        timer4.start(); //starts the timer
    }
    
    /**
     * Reads the highScores.txt file and pulls the player's stats and bot's stats
     */
    public void readWins(){
        int[] score = new int[2]; // Creates int array to store scores from file
        try {
            FileReader reader = new FileReader("highScores.txt"); // FileReader to access file
            BufferedReader bufferedReader = new BufferedReader(reader); // BufferedReader to read lines
            AtomicInteger count = new AtomicInteger(0); // Atomic Integer to access both lines
            bufferedReader.lines().forEach(line -> { // Loop that goes through a line per iteration
                score[count.get()] = Integer.parseInt(line.split(":")[1]); // Stores value of score into array
                count.set(count.get() + 1); // Adds 1 to count
            });
            reader.close(); // Closes file reader
        } catch (IOException e) {
            e.printStackTrace();
        }

        txtPlayerWins.setText(String.valueOf(score[0])); // Displays current player win stats in text box
        txtRobotWins.setText(String.valueOf(score[1])); // Displays current bot win stats in text box
    }
    
    /**
     * Writes the updated player and bot stats after a game is over to the highScores.txt file
     * @param playerWins The updates amount of wins the player has
     * @param robotWins The updated amount of wins the bot has
     */
    public void writeWins(int playerWins, int robotWins){
        FileWriter writer; // FileWriter to acces the file
    
        try {
            writer = new FileWriter("highScores.txt", false); // Accesses the file with write status append as false
            writer.write("Player Wins:" + playerWins); // Adds player wins to file
            writer.write("\r\n");   // write new line
            writer.write("Robot Wins:" + robotWins); // Adds robbot wins to file
            writer.close(); // Closes writer
        } catch (IOException ex) {
            Logger.getLogger(GUIDesign.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIDesign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
                new GUIDesign().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnBotGroup;
    private javax.swing.ButtonGroup btnGroupChoice;
    private javax.swing.JRadioButton btnPaper;
    private javax.swing.ButtonGroup btnPlayerGroup;
    private javax.swing.JRadioButton btnRock;
    private javax.swing.JRadioButton btnScissorsP;
    private javax.swing.JButton btnShoot;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblAnimation;
    private javax.swing.JLabel lblBot;
    private javax.swing.JLabel lblBotP;
    private javax.swing.JLabel lblBotTitle;
    private javax.swing.JLabel lblPlayer;
    private javax.swing.JLabel lblPlayerP;
    private javax.swing.JLabel lblPlayerTitle;
    private javax.swing.JLabel lblPlayerWins;
    private javax.swing.JLabel lblRobotWins;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblVersus;
    private javax.swing.JTextField txtBot;
    private javax.swing.JTextField txtPlayer;
    private javax.swing.JTextField txtPlayerWins;
    private javax.swing.JTextField txtResponse;
    private javax.swing.JTextField txtRobotWins;
    // End of variables declaration//GEN-END:variables

    
}
